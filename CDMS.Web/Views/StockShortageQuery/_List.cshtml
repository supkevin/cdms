@model IEnumerable<CDMS.Model.ViewModel.StockQueryViewModel>

@{
    Layout = null;
}	

@*測試捉所有ViewBag*@
@*@{
    string[] ignore = { "ActionName", "ControllerName" };
    var routeValues = new RouteValueDictionary();

    foreach (var viewBagItem in ViewContext.ViewData.Where(x => ignore.Contains(x.Key) == false))
    {
        if (viewBagItem.Value != null)
        {
            var type = viewBagItem.Value.GetType();

            if (type == typeof(string) || type == typeof(string[]))
            {
                <p> @viewBagItem.Key @@: @viewBagItem.Value </p>;
                routeValues.Add(viewBagItem.Key, viewBagItem.Value);
            }
        }
    }
}*@

@functions{

    private string GeneratePageLink(int page, string action = "_List")
    {

        string[] ignore = { "ActionName", "ControllerName" };
        var routeValues = new RouteValueDictionary();

        foreach (var viewBagItem in ViewContext.ViewData.Where(x => ignore.Contains(x.Key) == false))
        {
            if (viewBagItem.Value != null)
            {
                var type = viewBagItem.Value.GetType();

                if (type == typeof(string) || type == typeof(string[]))
                {
                    routeValues.Add(viewBagItem.Key, viewBagItem.Value);
                }
            }
        }

        routeValues.Add("page", page);

        var result = Url.Action("_List", (RouteValueDictionary)routeValues);
        return result;
    }
}
<div class="table-responsive">
    <table class="table table-bordered">
        <thead>
            <tr class="active">                
                <th>
                    @Html.DisplayNameFor(m => m.ProductID)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.UnitName)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.ProductKindName)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.SafeStock)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.QtyWarehouse1)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.QtyWarehouse2)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.QtyTotal)
                </th>
                <th>
                    @Html.DisplayNameFor(m => m.Shortage)
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(m => item.ProductID)
                        </td>
                        <td>
                            @Html.DisplayFor(m => item.ProductName)
                        </td>
                        <td>
                            @Html.DisplayFor(m => item.UnitName)
                        </td>
                        <td>
                            @Html.DisplayFor(m => item.ProductKindName)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(m => item.SafeStock)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(m => item.QtyWarehouse1)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(m => item.QtyWarehouse2)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(m => item.QtyTotal)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(m => item.Shortage)
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="99">@Html.OutputText("TextNoData".ToLocalized())</td></tr>
            }
        </tbody>
    </table>
</div>

@Html.Hidden("p", (Int32)@ViewBag.p)
@using PagedList
@using PagedList.Mvc
@Html.PagedListPager((IPagedList)Model,
        page => GeneratePageLink(page),
        PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(
        new PagedListRenderOptions
        {
            LinkToFirstPageFormat = "<<",
            LinkToPreviousPageFormat = "<",
            LinkToNextPageFormat = ">",
            LinkToLastPageFormat = ">>"
        },
        new AjaxOptions()
        {
            HttpMethod = "Post",
            UpdateTargetId = "MyContent"

        }))









